USAGE INSTRUCTIONS
==================

1. File formats
---------------

# Configuration

The configuration file is an XML file with the root 'docent' and has to contain
the following sections in exactly that order:

  - random
  - state-generator
  - search
  - models
  - weights

See the stub files in doc/config to get started with your own configuration.

# Input and Output

The crucial difference between Moses and similar tools on the one hand and Docent
on the other, is that Docent, above the usual *sentence* segmentation level, also
considers a *document* segmentation level.

With the exception of the simple test binary 'docent-test' (see Section 2),
Docent therefore uses a slightly loosened variant of NIST's MTeval XML format for
its in- and output. The (first) 'srcset' of such a file is used for input, and
for output, a corresponding data structure below a 'tstset' node is created and
populated with translations. Each 'doc' node inside such a set is the document-
segmentation scope within which one instance of Docent's document-level decoding
takes place.

An MTeval XML file with a 'tstset' node is also used for the side transport
(parameter '-t') through which raw Moses translations can be provided as the
starting state for Docent's decoding

The XML schema file 'doc/mteval.xsd' can be used with e.g. 'xmllint' for verifying
the format compliance of such XML files.

Furthermore, detailed source annotations can additionally be provided to Docent in
a directory hierarchy following the 'MMAX2' standard (http://mmax2.sourceforge.net/)
(the XML input file will still be needed, though).

NOTE: The NIST XML format often contains untokenised text, but Docent needs all
its input to tokenised, and likewise outputs tokenised translations.
You may want to use a combination of 'mteval2txt.pl', 'txt2mteval.pl' (for both,
see Section 3), and your usual tokeniser tool to achieve that source format.

To prepare a phrase-segmented Moses translation of the form needed as the raw
translation in Docent, extract the tokenised sourcer segments, e.g. with
'mteval2txt.pl -o...' (see Section 3), run them through Moses with its '-t'
(report-segmentation) flag]*, and create the MTeval structure using
'mteval-insert-segs.pl'.
*] The output must consist of phrases separated by word-alignment information
  between pipe symbols, like this:
      phrase1 |0-0| phrase 2 |1-2| . |3-3|


2. Flavours
-----------

Docent comes in a number of 'flavours', currently represented in separate binaries.
Run each without arguments to see the available command-line arguments.

- `docent-test`
  A very simple test program that reads plaint text from STDIN, writes plain text
  to STDOUT, and treats each line as a separate document. Mainly intended to check
  that fundamental operation of the decoder with the given configuration is okay.

- `docent`
  A basic variant. Reads data in the NIST and optionally MMAX2 formats, and
  creates an output 'tstset' on STDOUT at the end of a decoding run.

- `lcurve-docent`
  The main and recommended variant, storing intermediate results along a 'learning
  curve' to files, starting after 256 decoding iterations and continuing in steps
  increasing by a factor of 2 up to 2^27 (134217728).

- `detailed-docent`
  A special variant once designed for generating output to be used with the
  minimum error rate training tool 'MERT'. Not actively developed and not tested
  with recent builds (beyond successful compilation).

- `mpi-docent`
  Compiled only if the MPI (Message Passing Interface) base and Boost libraries are
  detected during building. Intended for high-performance runs on a computation
  or similar hardware. Not actively developed lately.


3. Support programs and scripts
-------------------------------

We provide a few scripts related to files in the NIST MTeval format in order to
simplify the data exchange between Docent and purely text-based MT tools:

- `scripts/txt2mteval.pl`
  Converts one or several 'flat' text files (where each line equals one segment)
  into either a 'srcset', 'tstset', or 'refset' within an MTeval XML file, where
  each file becomes a 'doc' node with the file name as the document ID.

- `scripts/mteval2txt.pl`
  Converts an MTeval XML file into a number of text files, one segment per line,
  or into one long 'flat' list of segments.

- `scripts/mteval-insert-segs.pl`
  Takes a 'srcset' MTeval XML file and creates a corresponding 'tstset' structure
  that contains the segments given in a text file or on STDIN.

The directory contains many more scripts for pre- and postprocessing data, which
may prove to be useful to you.

The *binary* build (see Build.txt) furthermore contains the following programs
related to the binary ProbingPT phrase-table format used by the current Docent:

- `CreateProbingPT`
  Takes a trained phrase table in plain-text format (compressed, if a corresponding
  compression library was available during compilation -- e.g. ZLib for a .gz file)
  and creates a directory containing the files constituting the ProbingPT format.

  NOTE: The ProbingPT data is platform dependent, so if you want to copy a phrase
  table between 32-bit and 64-bit machines, you can copy the text raw data but will
  have to run CreateProbingPT on each machine.

- `QueryProbingPT`
  Looks up phrases, given on STDIN, in a specified ProbingPT phrase table.


APPENDIX: Troubleshooting
--------

NOTE: See doc/Build.txt for tips regarding problems with *compiling* (building) Docent.

...
