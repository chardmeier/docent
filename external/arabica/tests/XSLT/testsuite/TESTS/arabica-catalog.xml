<test-suite>
  <test-catalog submitter="Arabica">
    <creator>JezUK</creator>
    <major-path>arabica</major-path>
    <date>2007-11-20</date>
    <test-case id="attributes01">
      <file-path>attributes</file-path>
      <purpose/>
      <scenario operation="standard">
	<input-file role="principal-data">attributes01.xml</input-file>
	<input-file role="principal-stylesheet">attributes01.xsl</input-file>
	<output-file role="principal" compare="XML">attributes01.out</output-file>
      </scenario>
    </test-case>
    <test-case id="error01">
      <file-path>errors</file-path>
      <purpose>xsl:stylesheet within xsl:stylesheet should fail</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error01.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error02">
      <file-path>errors</file-path>
      <purpose>xsl:stylesheet within xsl:stylesheet should fail</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error02.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error03">
      <file-path>errors</file-path>
      <purpose>xsl:processing-instruction name cannot be 'xml'</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error03.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error04">
      <file-path>errors</file-path>
      <purpose>xsl:processing-instruction name cannot be 'xml'</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error04.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error05">
      <file-path>errors</file-path>
      <purpose>xsl:processing-instruction name cannot be 'xml'</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error05.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error06">
      <file-path>errors</file-path>
      <purpose>check qnames</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error06.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error07">
      <file-path>errors</file-path>
      <purpose>check qnames</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error07.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error08">
      <file-path>errors</file-path>
      <purpose>check qnames</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error08.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="error09">
      <file-path>errors</file-path>
      <purpose>check qnames</purpose>
      <scenario operation="execution-error">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">error09.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="include01">
      <file-path>include</file-path>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">include01.xsl</input-file>
	<output-file role="principal" compare="XML">include01.out</output-file>
      </scenario>
    </test-case>
    <test-case id="include02">
      <file-path>include</file-path>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">include02.xsl</input-file>
	<output-file role="principal" compare="XML">include02.out</output-file>
      </scenario>
    </test-case>
    <test-case id="pi01">
      <file-path>processing-instruction</file-path>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">pi01.xsl</input-file>
	<output-file role="principal" compare="XML">pi01.out</output-file>
      </scenario>
    </test-case>
    <test-case id="stylesheet01">
      <file-path>stylesheet</file-path>
      <purpose>2.2 - the xsl:stylesheet element may contain any element not from the XSLT namespace, provided that the expanded-name of the element has a non-null namespace URI</purpose>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">stylesheet01.xsl</input-file>
	<output-file role="principal">stylesheet01.out</output-file>
      </scenario>
    </test-case>
    <test-case id="stylesheet02">
      <file-path>stylesheet</file-path>
      <purpose>2.2 - the xsl:stylesheet element may contain any element not from the XSLT namespace, provided that the expanded-name of the element has a non-null namespace URI</purpose>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">stylesheet02.xsl</input-file>
	<output-file role="principal">stylesheet02.out</output-file>
      </scenario>
    </test-case>
    <test-case id="stylesheet03">
      <file-path>stylesheet</file-path>
      <purpose>2.2 - the xsl:stylesheet element may contain any element not from the XSLT namespace, provided that the expanded-name of the element has a non-null namespace URI</purpose>
      <scenario operation="standard">
	<input-file role="principal-data">data.xml</input-file>
	<input-file role="principal-stylesheet">stylesheet03.xsl</input-file>
	<output-file role="principal">stylesheet03.out</output-file>
      </scenario>
    </test-case>
    <test-case id="variables01">
      <file-path>variables</file-path>
      <purpose>Use xsl:variable within xsl:variable with a variable of the same name. Also, a global variable exist (with the same name as well). Adapted from MS test case</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">VariableWithinVariable.xml</input-file>
        <input-file role="principal-stylesheet">VariableWithinVariable.xsl</input-file>
        <output-file role="principal">VariableWithinVariable_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables02">
      <file-path>variables</file-path>
      <purpose>Use xsl:variable within xsl:variable </purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">VariableWithinVariable2.xml</input-file>
        <input-file role="principal-stylesheet">VariableWithinVariable2.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="variables03">
      <file-path>variables</file-path>
      <purpose>Use xsl:variable within xsl:variable </purpose>
      <scenario operation="standard">
        <input-file role="principal-data">VariableWithinVariable3.xml</input-file>
        <input-file role="principal-stylesheet">VariableWithinVariable3.xsl</input-file>
        <output-file role="principal">VariableWithinVariable3_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables04">
      <file-path>variables</file-path>
      <purpose>Use xsl:variable within xsl:variable </purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">VariableWithinVariable4.xml</input-file>
        <input-file role="principal-stylesheet">VariableWithinVariable4.xsl</input-file>
      </scenario>
    </test-case>
		<test-case id="variables05">
			<file-path>variables</file-path>
			<purpose>import precedence</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">import_precedence.xsl</input-file>
        <output-file role="principal">import_precedence_result.xml</output-file>
      </scenario>
		</test-case>
		<test-case id="variables06">
			<file-path>variables</file-path>
			<purpose>import precedence</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">import_precedence2.xsl</input-file>
        <output-file role="principal">import_precedence2_result.xml</output-file>
      </scenario>
		</test-case>
    <test-case id="variables07">
      <file-path>variables</file-path>
      <purpose>namespace</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">namespace.xsl</input-file>
        <output-file role="principal">namespace_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables08">
      <file-path>variables</file-path>
      <purpose>namespace</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">namespace2.xsl</input-file>
        <output-file role="principal">namespace_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables09">
      <file-path>variables</file-path>
      <purpose>namespace</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">namespace3.xsl</input-file>
        <output-file role="principal">namespace_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables10">
      <file-path>variables</file-path>
      <purpose>namespace</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">foo.xml</input-file>
        <input-file role="principal-stylesheet">namespace4.xsl</input-file>
        <output-file role="principal">namespace4_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="variables11">
      <file-path>variables</file-path>
      <purpose>detecting duplicate variable or parameter names</purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">duplicate.xml</input-file>
        <input-file role="principal-stylesheet">duplicate1.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="variables12">
      <file-path>variables</file-path>
      <purpose>detecting duplicate variable or parameter names</purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">duplicate.xml</input-file>
        <input-file role="principal-stylesheet">duplicate2.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="variables13">
      <file-path>variables</file-path>
      <purpose>detecting duplicate variable or parameter names</purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">duplicate.xml</input-file>
        <input-file role="principal-stylesheet">duplicate3.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="variables14">
      <file-path>variables</file-path>
      <purpose>detecting duplicate variable or parameter names</purpose>
      <scenario operation="execution-error">
        <input-file role="principal-data">duplicate.xml</input-file>
        <input-file role="principal-stylesheet">duplicate4.xsl</input-file>
      </scenario>
    </test-case>
    <test-case id="variables15">
      <file-path>variables</file-path>
      <purpose>ensuring using document() in a variable gives us the root node</purpose>
      <scenario operation="standard">
        <input-file role="principal-data">documentfn.xml</input-file>
        <input-file role="principal-stylesheet">documentfn.xsl</input-file>
        <output-file role="principal">documentfn_result.xml</output-file>
      </scenario>
    </test-case>
    <test-case id="text01">
      <file-path>text</file-path>
      <scenario operation="standard">
        <input-file role="principal-data">text01.xml</input-file>
        <input-file role="principal-stylesheet">text01.xsl</input-file>
        <output-file role="principal">text01.txt</output-file>
      </scenario>
    </test-case>
  </test-catalog>
</test-suite>
